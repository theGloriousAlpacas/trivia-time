{"version":3,"sources":["triviaTimeLogo.png","Header.js","Category.js","ScoreBoard.js","Timer.js","playerInfo/NumberOfPlayers.js","playerInfo/NamesAndAvatars.js","Playgame.js","playerInfo/PlayerInformation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","Category","shuffleArray","array","i","length","j","Math","floor","random","temp","questionsSubmit","res","playerInfo","questions","console","log","newInfo","count","arr","x","allAnswers","incorrect_answers","correct_answer","push","setState","players","state","category","e","selectedCategory","target","value","numberOfQuestions","axios","url","params","amount","difficulty","type","then","response","data","results","parser","DOMParser","map","question","forEach","incorrectAnswer","index","newString","parseFromString","body","textContent","oldString","props","document","querySelector","scrollIntoView","behavior","onChange","generateQuestions","htmlFor","disabled","selected","this","onClick","getPlayerInformation","Component","ScoreBoard","localPlayers","playerInformation","sort","a","b","score","player","name","key","handleReset","to","Timer","startQuiz","start","myInterval","setInterval","timer","stopTime","clearInterval","HowManyPlayers","handleChange","event","numberOfPlayers","NameAndAvatars","getAvatars","updateState","preventDefault","createPlayers","isShowingAvatars","avatars","id","toString","img","valid","size","temporaryValue","randomIndex","currentIndex","slice","handleFormSubmit","formIsValid","validateForm","alert","generatePlayers","onSubmit","Playgame","componentDidMount","handleNextPlayer","cleanTheScreen","currentPlayer","answeredQuestionTracker","divArray","div","classList","toggle","onAnswerClicked","answer","questionNumber","parentDiv","parentNode","timerFunction","showQuestions","reset","PlayerInformation","getNumberOfPlayers","goToCategory","goToPlay","NumberOfPlayers","NamesAndAvatars","getCategory","App","updatedPlayersInformation","basename","process","exact","path","render","pathname","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb8b20cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/triviaTimeLogo.44de159f.png\";","import React, { Component } from 'react';\nimport logo from './triviaTimeLogo.png';\n\n// Function component because all it will do is display info on the page\n\nconst Header = () => {\n    return(\n        <header>\n            <div className=\"wrapper\">\n                <div className=\"headerContainer\">\n                    <img src={logo} className=\"logo\" alt=\"Trivia Time logo\"/>\n                    <h1><span>Fight your friends</span> <span>in a battle of wits!</span></h1>\n                </div>\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport axios from \"axios\";\nclass Category extends Component {\n    constructor() {\n        super();\n        this.state = {\n            players: [],\n            category: \"\"\n        }\n    }\n    generateQuestions(e, playerInfo) {\n        const selectedCategory = e.target.value\n        const numberOfQuestions = playerInfo.length * 3\n        // console.log(e.target[1].children);\n        // const categoryName = e.target.text\n        axios({\n            url: 'https://opentdb.com/api.php',\n            params: {\n                amount: numberOfQuestions,\n                category: selectedCategory,\n                difficulty: 'medium',\n                type: 'multiple',\n                // encode: 'base64'\n            }\n        }).then(response => {\n            const res = response.data.results;\n            console.log('this is the data from the api', res);\n            // Use DOMParser to get real string\n            //https://stackoverflow.com/questions/1912501/unescape-html-entities-in-javascript\n            const parser = new DOMParser();\n            res.map((question) => {\n                question.incorrect_answers.forEach((incorrectAnswer, index) => {\n                    const dom = parser.parseFromString(incorrectAnswer, \"text/html\")\n                    const newString = dom.body.textContent;\n                    question.incorrect_answers[index] = newString;\n                });\n                const oldString = question.correct_answer\n                const dom = parser.parseFromString(oldString, \"text/html\")\n                // console.log(dom)\n                const newString = dom.body.textContent;\n                question.correct_answer = newString\n            })\n            res.map((question) => {\n                const oldString = question.question;\n                const dom = parser.parseFromString(oldString, \"text/html\")\n                const newString = dom.body.textContent;\n                question.question = newString\n            })\n            this.questionsSubmit(res, this.props.playerInfo)\n        })\n    }\n\n    componentDidMount() {\n        document\n            .querySelector('.categoryContainer')\n            .scrollIntoView({ behavior: 'smooth' });\n    }\n\n    shuffleArray = (array) => {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    }\n    questionsSubmit = (res, playerInfo) => {\n        const questions = res\n        console.log(questions)\n        const newInfo = playerInfo\n        for (let i = 0; i < questions.length / 3; i++) {\n            let count = 0;\n            const arr = [];\n            while (count < 3) {\n                let x = i * 3 + count;\n                res[x].allAnswers = [...res[x].incorrect_answers, res[x].correct_answer];\n                res[x].allAnswers = this.shuffleArray(res[x].allAnswers);\n                arr.push(res[x]);\n                count++;\n            }\n            newInfo[i].questions = arr;\n        }\n\n        this.setState({\n            players: newInfo\n        })\n    };\n\n    render() {\n        return (\n            <div className=\"categoryContainer\">\n                <form className=\"categoryForm\" onChange={(e) => {\n                    this.generateQuestions(e, this.props.playerInfo)\n                }}>\n                    <fieldset className=\"categoryFieldset\">\n                        <label className=\"categoryLabel\" htmlFor=\"\">Select Category: </label>\n                        <select>\n                            <option disabled selected className=\"default\">Select a Category</option>\n                            <option value=\"9\">General Knowledge</option>\n                            <option value=\"27\">Animals</option>\n                            <option value=\"29\">Comics</option>\n                            <option value=\"11\">Movies</option>\n                            <option value=\"17\">Science And Nature</option>\n                        </select>\n                    </fieldset>\n\n                    {this.state.players.length !== 0 ? <button className=\"categoryName\" onClick={(e) => { this.props.getPlayerInformation(e, this.state.players) }}>It's Time For the Showdown!</button> : null}\n\n                    {/* <button className=\"categoryName\" onClick={(e) => { this.props.getPlayerInformation(e, this.state.players) }}>It's Time For the Showdown!</button> */}\n                </form>\n            </div>\n        )\n    }\n}\nexport default Category;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\n\nclass ScoreBoard extends Component {\n\n    render() {\n\n        let localPlayers = this.props.playerInformation;\n        localPlayers.sort((a, b) => b.score - a.score);\n\n        return (\n            <section className=\"finalResults\">\n\n                <div className=\"scoreBoard\">\n                    <h2>Results</h2>\n                    <div className=\"scoreList\">\n                        <ul>\n                            {/* Number of li's generated = number of players in the game. This info is in state - need to confirm structure*/}\n                            {localPlayers.map((player, index) => {\n                                // Variables for specific pieces of info\n                                const name = player.name;\n                                const score = player.score;\n                                return (\n                                    <li key={index}>\n                                        <div className=\"results\">\n                                            <h3>{name}</h3>\n                                            <p>{score}</p>\n                                        </div>\n                                    </li>\n                                )\n                            })}\n                        </ul>\n                    </div>\n                    {/* Play Again button - sets state to original state (empty) */}\n                    <button className=\"replay\" onClick={this.props.handleReset}><Link to=\"/\">Quiz Your Friends Again!</Link></button>\n                </div>\n            </section>\n        )\n    }\n}\nexport default ScoreBoard;","import React, { Component } from \"react\";\n// Stretch goal - change color/appearance when at 10 seconds and then at 5 seconds to visually show you're running out of time\nclass Timer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            timer: 30,\n            start: true\n        }\n    }\n    // Create a timer that counts down from 30 seconds - needs to be tied to the Category Component so once category is picked, timer starts\n    componentDidMount() {\n        let myInterval = setInterval(() => {\n            this.setState({\n                timer: this.state.timer - 1\n            })\n        }, 1000)\n        this.setState({\n            myInterval: myInterval\n        })\n    }\n    // ComponentDidUpdate kicks in when state is changed\n    // Score state will update which will trigger this - check Category.js\n    componentDidUpdate() {\n        // What happens when the timer hits 0\n        if (this.state.timer === 0) {\n            // set timer back to 30\n            this.setState({\n                timer: 30,\n                start: false\n            })\n            this.props.stopTime();\n\n            clearInterval(this.state.myInterval);\n            //Then go to the next question\n            // this.props.stopTime();\n        }\n    }\n    startQuiz = () => {\n        this.setState({\n            start: true\n        })\n        this.myInterval = setInterval(() => {\n            this.setState({\n                timer: this.state.timer - 1\n            })\n        }, 1000)\n    }\n\n    render() {\n        // let timer = this.state.timer\n        // Setting styles for timer\n        let timer = () => {\n            if (this.state.timer >= 15) {\n                return <p className=\"timer timerOk\">{this.state.timer}</p>\n            } else if (this.state.timer >= 10) {\n                return <p className=\" timer timerWrapUp\">{this.state.timer}</p>\n            } else {\n                return <p className=\"timer timerDanger\">{this.state.timer}</p>\n            }\n        }\n        return (\n            <>\n                {/* <button onClick={this.startQuiz}>Start Quiz</button> */}\n                {/* {this.startQuiz} */}\n                <p>{this.state.start ? timer() : \"Time's Up!\"}</p>\n            </>\n        )\n    }\n}\nexport default Timer;","import React, { Component } from 'react';\n\nclass HowManyPlayers extends Component {\n    handleChange = (event) => {\n        this.props.numberOfPlayers(event.target.value);\n    }\n    render() {\n        return (\n          <main>\n            <form>\n              <fieldset className=\"playerForm\">\n                <label className=\"playerLabel\" htmlFor=\"playerForm\">How many are playing?! </label>\n                <select onChange={this.handleChange}>\n                  <option value=\"\">Number of Friends!</option>\n                  <option value=\"1\">1</option>\n                  <option value=\"2\">2</option>\n                  <option value=\"3\">3</option>\n                  <option value=\"4\">4</option>\n                </select>\n              </fieldset>\n            </form>\n          </main>\n        );\n    }\n}\nexport default HowManyPlayers;","import React, { Component } from 'react';\nimport Category from '../Category';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nclass NameAndAvatars extends Component {\n    constructor() {\n        super();\n        this.state = {\n            players: [],\n            isShowingAvatars: false\n        };\n    }\n\n    componentDidMount() {\n        document\n        .querySelector('.avatarSection')\n        .scrollIntoView({ behavior: 'smooth' });\n    }\n\n    getAvatars = () => {\n        return [\n        \"https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=blue\",\n        \"https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=red\",\n        \"https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=yellow\",\n        \"https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=purple\",\n        ];\n    };\n\n    updateState = (e, numberOfPlayers) => {\n        e.preventDefault();\n        if(numberOfPlayers !== 0) {\n            let players = this.createPlayers(numberOfPlayers);\n            this.setState({\n                isShowingAvatars: true,\n                players: players\n            });\n        }\n    };\n\n    createPlayers = (numberOfPlayers) => {\n        let avatars = this.getAvatars();\n        let players = [];    \n        avatars = this.shuffleArray(avatars);\n        for (let i = 0; i < numberOfPlayers; i++) {\n            players.push({\n                id: (i + 1).toString(),\n                img: avatars[i],\n                name: '',\n                score: 0,\n                valid: false\n            });\n        }\n        return players;\n    }\n\n    shuffleArray = (array, size) => {\n        size = size || array.length;\n        let currentIndex = array.length;\n        let temporaryValue;\n        let randomIndex;\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n        return array.slice(0,size);\n    }\n\n    handleChange = (e) => {\n        let index = e.target.id - 1;\n        let name = e.target.value;\n        this.setState((state) => {\n            state.players[index].valid = (name && name.length !== 0);\n        });\n    }\n\n    handleFormSubmit = (e) => {\n        e.preventDefault();\n\n        let formIsValid = this.validateForm(this.state.players);\n        this.props.playerInformation(this.state.players, formIsValid);\n       \n        if (formIsValid) {\n            for(let i=0; i<e.target.length-1; i++) {\n                let index = e.target[i].id - 1;\n                let name = e.target[i].value;\n                this.setState((state) => {\n                    state.players[index].name = name;\n                });         \n            }\n        } else {\n            alert(\"Slow your roll! Enter some names first!\");\n        }\n    };\n\n    validateForm = (players) => {\n        for(let i=0; i< players.length; i++) {\n            if(!players[i].valid) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    generatePlayers = () => {\n        if (this.state.isShowingAvatars) {\n            const players = this.state.players;\n            return ( \n                <div className=\"playerSetupContainer\">\n                    {players.map((player) => {\n                        return (\n                            <div key={player.id} className=\"playerInfoInput\">\n                                <img src={player.img} alt=\"\" />\n                                <input onChange={this.handleChange} id={player.id}/>\n                            </div>\n                        );\n                    })}\n                </div>\n            );\n        } else {\n            return <></>;\n        }\n    };\n\n    render() {\n        return (\n          <div className=\"avatarSection\">\n            <form onSubmit={this.handleFormSubmit} className=\"numberOfPlayersSubmit\">\n              {this.generatePlayers()}\n              {!this.state.isShowingAvatars \n                    ? (<button type=\"button\" onClick={(e) => this.updateState(e, this.props.numberOfPlayers)}>Double Check You Have Enough Friends!</button>) \n                    : (<button type=\"submit\">Let's Battle!</button>)\n              }\n            </form>\n          </div>\n        );\n    }\n}\n\nexport default NameAndAvatars;\n\n\n\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport Timer from './Timer.js';\nimport ScoreBoard from './ScoreBoard.js'\n// Started the current game at current Player at 0 which is the first player.\n// The current question for the player is 0 too.\nclass Playgame extends Component {\n    constructor() {\n        super();\n        this.state = {\n            cleanTheScreen: false,\n            currentPlayer: 0,\n            answeredQuestionTracker: [false, false, false],\n        };\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            players: this.props.players\n        })\n        document\n            .querySelector('.gameScreen')\n            .scrollIntoView({ behavior: 'smooth' });\n    }\n\n    handleNextPlayer = () => {\n        this.setState({\n            cleanTheScreen: true,\n            currentPlayer: this.state.currentPlayer + 1,\n            answeredQuestionTracker: [false, false, false],\n        })\n        const div1 = document.querySelector(\".answer1\")\n        const div2 = document.querySelector(\".answer2\")\n        const div3 = document.querySelector(\".answer3\")\n        const divArray = [div1, div2, div3]\n        console.log(divArray)\n        divArray.forEach((div) => {\n            div.classList.toggle(\"parentHide\")\n        })\n        const questionDiv = document.querySelector('.questionDiv')\n        questionDiv.classList.toggle('questionDivHide')\n    }\n\n    onAnswerClicked = (e, question, answer, questionNumber) => {\n        const parentDiv = e.target.parentNode\n        if (!this.state.answeredQuestionTracker[questionNumber]) {\n            let player = this.props.players[this.state.currentPlayer];\n            if (answer === question.correct_answer) {\n                player.score++;\n                let answeredQuestionTracker = this.state.answeredQuestionTracker;\n                answeredQuestionTracker[questionNumber] = true;\n                this.setState({\n                    answeredQuestionTracker: answeredQuestionTracker,\n                });\n            }\n        }\n        parentDiv.classList.toggle(\"parentHide\")\n    }\n\n    // updatedPlayersInformation = (e, players) => {\n    //     e.preventDefault();\n    //     this.setState({\n    //       players: players\n    //     })\n    //   }\n\n    timerFunction = () => {\n        const questionDiv = document.querySelector('.questionDiv')\n        questionDiv.classList.toggle(\"questionDivHide\")\n    }\n\n    showQuestions = () => {\n        // console.log(\"players:\", this.props.players);\n        if (!this.props.players || !this.props.players[0].questions) {\n            console.log(\"Pick your categories\");\n            return <></>;\n        } else if (this.state.cleanTheScreen) {\n            this.setState({\n                cleanTheScreen: false\n            });\n            return <></>;\n        } else {\n            const player = this.props.players[this.state.currentPlayer];\n            if (!player) {\n                return <ScoreBoard playerInformation={this.props.players} handleReset={this.props.reset} />\n            }\n            return (\n                <section className=\"gameScreen\">\n                    <div className=\"wrapper\">\n                        <div className=\"questionDiv\">\n                            <div className=\"turnDetails\">\n                                <p className=\"playerName\">Player Up to Bat: {player.name}</p>\n                                <div className=\"timerBackground\">\n                                    <Timer stopTime={this.timerFunction} />\n                                </div>\n                            </div>\n\n                            <div className=\"questionContainer\">\n\n                                {player.questions.map((question, index) => {\n                                    return (\n                                        <div className=\"questions\">\n                                            <p className=\"questionText\" key={index}>{`Question ${index + 1} : ${question.question}`}</p>\n                                            <div className={`answer${index + 1}`}>\n                                                {question.allAnswers.map((answer) => {\n                                                    return (\n                                                        <button key={index} onClick={(e) => this.onAnswerClicked(e, question, answer, index)}>\n                                                            {answer}</button>\n                                                    )\n                                                })}\n                                            </div>\n                                        </div>)\n                                })}\n                            </div>\n                        </div>\n\n                        <div className=\"nextButton\">\n                            <button className=\"nextPlayer\" onClick={this.handleNextPlayer}>Continue</button>\n                        </div>\n\n                    </div>\n\n                </section>\n            )\n        }\n    };\n\n    render() {\n        return this.showQuestions();\n    }\n}\nexport default Playgame;","// Mini App.js that will take info from NumberOf Players & Names & Avatars\n\nimport React, { Component } from \"react\";\nimport NumberOfPlayers from './NumberOfPlayers.js';\nimport NamesAndAvatars from './NamesAndAvatars.js';\nimport Category from \"../Category.js\";\nimport { BrowserRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\nimport Playgame from '../Playgame'\n\nclass PlayerInformation extends Component {\n    constructor() {\n        super();\n        this.state = {\n            players: [],\n            numberOfPlayers: 0,\n            goToCategory: false,\n            goToPlay: false\n        }\n    }\n    getNumberOfPlayers = (numberOfPlayers) => {\n        this.setState({\n            numberOfPlayers: numberOfPlayers\n        })\n    }\n    getPlayerInformation = (players, formIsValid) => {\n        this.setState({\n            players: players,\n            goToCategory: formIsValid\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <NumberOfPlayers numberOfPlayers={this.getNumberOfPlayers} />\n                <NamesAndAvatars numberOfPlayers={this.state.numberOfPlayers} playerInformation={this.getPlayerInformation} />\n                {this.state.goToCategory === true \n                    ? (<Category playerInfo={this.state.players} getPlayerInformation={this.props.getCategory} />) \n                    : null}\n            </div>\n        )\n    }\n}\nexport default PlayerInformation;","import './App.css';\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport Header from './Header.js'\nimport Footer from './Footer.js'\nimport Category from './Category.js';\nimport ScoreBoard from './ScoreBoard.js';\nimport Timer from './Timer.js'\nimport PlayerInformation from './playerInfo/PlayerInformation.js';\nimport Playgame from './Playgame.js'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questions: {},\n      players: [],\n      goToPlay: false\n    }\n  }\n\n  // handleChange = (event) => {\n  //   console.log(event);\n  //   this.setState({\n  //     players: event.target.value,\n  //   })\n  // }\n\n  updatedPlayersInformation = (e, players) => {\n    e.preventDefault();\n    this.setState({\n      players: players\n    })\n  }\n\n  // Event Listener for Play Again button\n  // Resets state to be empty so players can start again\n  // Confirm all key value pairs in state\n  handleReset = (event) => {\n    event.preventDefault();\n    this.setState({\n      questions: {},\n      players: [],\n      goToPlay: false\n    })\n  }\n\n  getCategory = (e, players) => {\n    e.preventDefault();\n    this.setState({\n      players: players,\n      goToPlay: true\n    })\n  }\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n\n          <Header />\n          {this.state.goToPlay ? <Redirect to=\"/play\" /> : null}\n\n          <Route exact path=\"/\">\n            <PlayerInformation\n              getCategory={this.getCategory} />\n          </Route>\n\n          <Route path=\"/play\" render={(props) => <Playgame players={this.state.players} reset={this.handleReset}/>} />\n          <Route render={() => <Redirect to={{ pathname: \"/\" }} />} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}