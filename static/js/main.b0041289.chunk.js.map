{"version":3,"sources":["triviaTimeLogo.png","Header.js","Category.js","Timer.js","ScoreBoard.js","playerInfo/NumberOfPlayers.js","playerInfo/NamesAndAvatars.js","Playgame.js","playerInfo/PlayerInformation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","Category","questionsSubmit","res","playerInfo","questions","console","log","newInfo","i","length","count","arr","x","push","setState","players","state","category","e","selectedCategory","target","value","numberOfQuestions","axios","url","params","amount","difficulty","type","then","response","data","results","parser","DOMParser","map","question","incorrect_answers","forEach","incorrectAnswer","index","newString","parseFromString","body","textContent","oldString","correct_answer","props","onChange","generateQuestions","htmlFor","disabled","selected","onClick","getPlayerInformation","Component","Timer","startQuiz","preventDefault","start","myInterval","setInterval","timer","this","clearInterval","stopTime","HowManyPlayers","handleChange","event","numberOfPlayers","NameAndAvatars","getAvatars","updateState","createPlayers","isShowingAvatars","isShowingSubmit","avatars","shuffleArray","id","toString","img","name","array","size","temporaryValue","randomIndex","currentIndex","Math","floor","random","slice","handleFormSubmit","generatePlayers","player","key","onSubmit","playerInformation","Playgame","onAnswerClicked","answer","nextPlayer","currentPlayer","nextQuestionPosition","currentQuestion","j","temp","showQuestions","allAnswers","quiz","showQuiz","time","PlayerInformation","getNumberOfPlayers","goToCategory","goToPlay","NumberOfPlayers","NamesAndAvatars","getCategory","App","updatedPlayersInformation","handleReset","to","exact","path","render","title","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b0041289.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/triviaTimeLogo.aff3404e.png\";","import React, { Component } from 'react';\nimport logo from './triviaTimeLogo.png';\n\n// Function component because all it will do is display info on the page\n\nconst Header = () => {\n    return(\n        <header>\n            <div className=\"wrapper\">\n                <img src={logo} alt=\"Trivia Time logo\"/>\n                <h1>Trivia Time</h1>\n                <p>Fight your friends in a battle of wits!</p>\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport axios from \"axios\";\n\nclass Category extends Component {\n    constructor() {\n        super();\n        this.state = {\n            players: [],\n            category: \"\"\n        }\n    }\n\n    generateQuestions(e, playerInfo) {\n\n        const selectedCategory = e.target.value\n        const numberOfQuestions = playerInfo.length * 3\n        // console.log(e.target[1].children);\n        // const categoryName = e.target.text\n\n        axios({\n            url: 'https://opentdb.com/api.php',\n            params: {\n                amount: numberOfQuestions,\n                category: selectedCategory,\n                difficulty: 'easy',\n                type: 'multiple',\n                // encode: 'base64'\n            }\n        }).then(response => {\n            const res = response.data.results;\n            console.log('this is the data from the api', res);\n            // Use DOMParser to get real string\n            //https://stackoverflow.com/questions/1912501/unescape-html-entities-in-javascript\n            const parser = new DOMParser();\n            res.map((question) => {\n                question.incorrect_answers.forEach((incorrectAnswer, index) => {\n                    const dom = parser.parseFromString(incorrectAnswer, \"text/html\")\n                    const newString = dom.body.textContent;\n                    question.incorrect_answers[index] = newString;\n                });\n                const oldString = question.correct_answer\n                const dom = parser.parseFromString(oldString, \"text/html\")\n                // console.log(dom)\n                const newString = dom.body.textContent;\n                question.correct_answer = newString\n            })\n            res.map((question) => {\n                const oldString = question.question;\n                const dom = parser.parseFromString(oldString, \"text/html\")\n                const newString = dom.body.textContent;\n                question.question = newString\n            })\n\n            this.questionsSubmit(res, this.props.playerInfo)\n            // this.setState({\n            //     category: categoryName\n            // })\n        })\n    }\n\n    questionsSubmit = (res, playerInfo) => {\n\n        const questions = res\n\n\n        console.log(questions)\n\n        const newInfo = playerInfo\n        for (let i = 0; i < questions.length / 3; i++) {\n            let count = 0;\n            const arr = [];\n            while (count < 3) {\n                let x = i * 3 + count;\n                arr.push(res[x]);\n                count++;\n            }\n            newInfo[i].questions = arr;\n        }\n\n        // if (questions.length === 3) {\n        //     newInfo[0].questions = questions\n\n        // } else if (questions.length === 6) {\n        //     newInfo[0].questions = [questions[0], questions[1], questions[2]]\n        //     newInfo[1].questions = [questions[3], questions[4], questions[5]]\n\n        // } else if (questions.length === 9) {\n        //     newInfo[0].questions = [questions[0], questions[1], questions[2]]\n        //     newInfo[1].questions = [questions[3], questions[4], questions[5]]\n        //     newInfo[2].questions = [questions[6], questions[7], questions[8]]\n\n        // } else {\n        //     newInfo[0].questions = [questions[0], questions[1], questions[2]]\n        //     newInfo[1].questions = [questions[3], questions[4], questions[5]]\n        //     newInfo[2].questions = [questions[6], questions[7], questions[8]]\n        //     newInfo[3].questions = [questions[9], questions[10], questions[11]]\n        // }\n\n        this.setState({\n            players: newInfo\n        })\n    };\n\n    // THIS DOES IN PLAYGAME.JS - SHITAL HAS DONE THIS\n    // onAnswerClicked = (question, answer) => {\n    //     console.log(question, answer);\n    //     console.log(answer === question.correct_answer)\n    //     this.setState({\n    //         currentQuestion: this.state.currentQuestion + 1\n    //     })\n    // }\n\n    // showQuestions = () => {\n    //     if (this.state.questions.length === 0) {\n    //         console.log(\"No questions yet\")\n    //         return <></>\n    //     } else {\n    //         // console.log(this.state.questions)\n    //         const question = this.state.questions[this.state.currentQuestion]\n    //         // console.log(question)\n    //         const allAnswers = [...question.incorrect_answers, question.correct_answer]\n    //         // randomize allAnswers?\n    //         return <div>\n    //             <h2>{question.question}</h2>\n    //             {allAnswers.map((answer) => {\n    //                 // console.log(this);\n    //                 return <button onClick={() => this.onAnswerClicked(question, answer)}>\n    //                     {answer}\n    //                 </button>\n    //             })}\n    //         </div>\n    //             ;\n    //     }\n    // }\n\n    render() {\n        return (\n            <div>\n                <form onChange={(e) => {\n                    this.generateQuestions(e, this.props.playerInfo)\n                }}>\n                    <fieldset>\n                        <label htmlFor=\"\">Select Category: </label>\n                        <select>\n                            <option disabled selected className=\"default\">Select a Category</option>\n                            <option value=\"9\">General Knowledge</option>\n                            <option value=\"27\">Animals</option>\n                            <option value=\"29\">Comics</option>\n                            <option value=\"11\">Movies</option>\n                            <option value=\"17\">Science And Nature</option>\n                        </select>\n                    </fieldset>\n                    <button onClick={(e) => { this.props.getPlayerInformation(e, this.state.players) }}>Continue</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Category;","import React, { Component } from \"react\";\n// Stretch goal - change color/appearance when at 10 seconds and then at 5 seconds to visually show you're running out of time\nclass Timer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            timer: 5,\n            start: true\n        }\n    }\n    // Create a timer that counts down from 30 seconds - needs to be tied to the Category Component so once category is picked, timer starts\n    // componentDidMount(){\n    //     this.myInterval = setInterval( () => {\n    //         this.setState({\n    //             timer: this.state.timer - 1\n    //         })\n    //     }, 1000)\n    // }\n    // ComponentDidUpdate kicks in when state is changed\n    // Score state will update which will trigger this - check Category.js\n    componentDidUpdate() {\n        // What happens when the timer hits 0\n        if (this.state.timer === 0) {\n            // set timer back to 30\n            this.setState({\n                timer: 30,\n                start: false\n            })\n            clearInterval();\n            //Then go to the next question\n            this.props.stopTime();\n        }\n    }\n    startQuiz = (e) => {\n        e.preventDefault();\n        this.setState({\n            start: true\n        })\n        this.myInterval = setInterval(() => {\n            this.setState({\n                timer: this.state.timer - 1\n            })\n        }, 1000)\n    }\n\n    render() {\n        // let timer = this.state.timer\n        // Setting styles for timer\n        let timer = () => {\n            if (this.state.timer >= 15) {\n                return <p className=\"timerOk\">{this.state.timer}</p>\n            } else if (this.state.timer >= 10) {\n                return <p className=\"timerWrapUp\">{this.state.timer}</p>\n            } else {\n                return <p className=\"timerDanger\">{this.state.timer}</p>\n            }\n        }\n        return (\n            <>\n                <h1>Hello this is the Timer</h1>\n                <button onClick={this.startQuiz}>Start Quiz</button>\n                <p>{this.state.start === true ? timer() : \"Time's Up!\"}</p>\n            </>\n        )\n    }\n}\nexport default Timer;\n\n\n// import React, { Component } from \"react\";\n\n\n//     // Stretch goal - change color/appearance when at 10 seconds and then at 5 seconds to visually show you're running out of time\n\n// class Timer extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             timer: 30\n//         }\n//     }\n\n//     // Create a timer that counts down from 30 seconds - needs to be tied to the Category Component so once category is picked, timer starts\n//     componentDidMount(){\n//         this.myInterval = setInterval( () => {\n//             this.setState({\n//                 timer: this.state.timer - 1\n//             })\n//         }, 1000)\n//     }\n\n//     // ComponentDidUpdate kicks in when state is changed\n//         // Score state will update which will trigger this - check Category.js\n//     componentDidUpdate(){\n//          // What happens when the timer hits 0\n//          if (this.state.timer === 0) {\n//             // set timer back to 30\n//             this.setState({\n//               timer: 30,\n//             })\n\n//             //Then go to the next question\n//           }\n//     }\n\n//     render() {\n//         // let timer = this.state.timer\n\n//         // Setting styles for timer\n//         let timer = () => {   \n//             if (this.state.timer >= 15) {\n//                 return <p className=\"timerOk\">{this.state.timer}</p>\n//             } else if (this.state.timer >= 10) {\n//                 return <p className=\"timerWrapUp\">{this.state.timer}</p>\n//             } else {\n//                 return <p className=\"timerDanger\">{this.state.timer}</p>\n//             }\n//         }\n\n//         return (\n//             <>\n//                 <h1>Hello this is the Timer</h1>\n//                 <p>{timer()}</p>\n//             </>\n//         )\n//     }\n// }\n\n// export default Timer;","import React, { Component } from 'react';\n\nclass ScoreBoard extends Component {\n    constructor(){\n        super();\n        // CONFIRM DATA STRUCTURE IN STATE\n        this.state = {\n            players: [\n                {\n                    id: 0,\n                    name: 'Anjelica',\n                    avatar: 'https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=blue',\n                    score: 1\n                },\n                {\n                    id: 1,\n                    name: 'Sahil',\n                    avatar: 'https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=red',\n                    score: 2\n                },\n                {\n                    id: 2,\n                    name: 'Danilo',\n                    avatar: 'https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=yellow',\n                    score: 3\n                },\n                {\n                    id: 3,\n                    name: 'Adam',\n                    avatar: 'https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=purple',\n                    score: 2\n                },\n                {\n                    id: 4,\n                    name: 'Shital',\n                    avatar: 'https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=orange',\n                    score: 2\n                },\n            ]\n        }\n    }\n\n\n    render() {\n        \n        return (\n    \n            <div className=\"scoreBoard\">\n                <h2>Results</h2>\n    \n                <div className=\"scoreList\">\n                    <ul>\n                        {/* Number of li's generated = number of players in the game. This info is in state - need to confirm structure*/}\n\n                        {this.state.players.map((player) => {\n\n                            // Variables for specific pieces of info\n                            const name = player.name;\n                            const score = player.score;\n\n                            return (\n                                <li>\n                                    <div className=\"results\">\n                                        <h3>{name}</h3>\n                                        <p>{score}</p>\n                                    </div>\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </div>\n    \n                {/* Play Again button - sets state to original state (empty) */}\n                <button onClick={this.props.handleReset}>Play again</button>\n            </div>\n        )\n    }\n    \n}\n\n\nexport default ScoreBoard;","import React, { Component } from 'react';\n\nclass HowManyPlayers extends Component {\n    handleChange = (event) => {\n        this.props.numberOfPlayers(event.target.value);\n    }\n    render() {\n        return (\n          <form>\n            <fieldset>\n              <label htmlFor=\"\">Number of players: </label>\n              <select onChange={this.handleChange}>\n                <option value=\"\">Number of Players</option>\n                <option value=\"1\">1</option>\n                <option value=\"2\">2</option>\n                <option value=\"3\">3</option>\n                <option value=\"4\">4</option>\n              </select>\n            </fieldset>\n          </form>\n        );\n    }\n}\nexport default HowManyPlayers;","import React, { Component } from 'react';\nimport Category from '../Category';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nclass NameAndAvatars extends Component {\n    constructor() {\n        super();\n        this.state = {\n            players: [],\n            isShowingAvatars: false,\n            isShowingSubmit: false,\n        };\n    }\n\n    getAvatars = () => {\n        return [\n        \"https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=blue\",\n        \"https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=red\",\n        \"https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=yellow\",\n        \"https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=purple\",\n        ];\n    };\n\n    updateState = (e, numberOfPlayers) => {\n        e.preventDefault();\n        if(numberOfPlayers !== 0) {\n            let players = this.createPlayers(numberOfPlayers);\n            this.setState({\n                isShowingAvatars: true,\n                isShowingSubmit: true,\n                players: players\n            });\n        }\n    };\n\n    createPlayers = (numberOfPlayers) => {\n        let avatars = this.getAvatars();\n        let players = [];    \n        avatars = this.shuffleArray(avatars);\n        for (let i = 0; i < numberOfPlayers; i++) {\n            players.push({\n                id: (i + 1).toString(),\n                img: avatars[i],\n                name: ''\n            });\n        }\n        return players;\n    }\n\n    shuffleArray = (array, size) => {\n        size = size || array.length;\n        let currentIndex = array.length;\n        let temporaryValue;\n        let randomIndex;\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n        return array.slice(0,size);\n    }\n\n    handleNumberOfUsersClicked() {\n        this.setState({isShowingSubmit: true});\n    }\n\n    handleSubmitClicked(e) {\n        this.setState({isShowingSubmit: false});\n    }\n\n    // handleFormSubmit = (e) => {\n    //   e.preventDefault();\n    //   console.log(e.target.length);\n    //   for(let i=0; i < e.target.length-1; i++) {\n    //     const id = e.target[i].id;\n    //     const name = e.target[i].value;\n    //     this.setState( state => {\n    //         let found = state.players.find(player => player.id === id);\n    //         if(found) {\n    //             found.name = name;\n    //         }\n    //     });\n    //   }\n    //   console.log(this.state.players);\n    // }\n     handleFormSubmit = (e) => {\n     e.preventDefault();\n     for(let i=0; i<e.target.length-1; i++) {\n        let index = e.target[i].id - 1;\n        let name = e.target[i].value;\n        this.setState((state) => {\n            state.players[index].name = name;\n        });         \n     }\n     console.log(this.state.players);\n   };\n\n    generatePlayers = () => {\n        if (this.state.isShowingAvatars) {\n            const players = this.state.players;\n            return ( \n                <div>\n                    {players.map((player) => {\n                        return (\n                            <div key={player.id}>\n                                <img src={player.img} alt=\"\" />\n                                <input onChange={this.handleChange} id={player.id}/>\n                            </div>\n                        );\n                    })}\n                </div>\n            );\n        } else {\n            return <></>;\n        }\n    };\n\n    render() {\n        return (\n          <div>\n            <form onSubmit={this.handleFormSubmit}>\n              {this.generatePlayers()}\n              {!this.state.isShowingAvatars \n                    ? (<button type=\"button\" onClick={(e) => this.updateState(e, this.props.numberOfPlayers)}>Click me</button>) \n                    : (<button type=\"submit\" onClick={(e) => this.props.playerInformation(this.state.players)}>Submit</button>)\n              }\n            </form>\n          </div>\n        );\n    }\n}\n\nexport default NameAndAvatars;\n\n\n\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport Timer from './Timer';\n\n// Started the current game at current Player at 0 which is the first player.\n// The current question for the player is 0 too.\nclass Playgame extends Component {\n\n    // Setting state to understand which player is playing and which question is showing up\n    constructor() {\n        super();\n        this.state = {\n            currentPlayer: 0,\n            currentQuestion: 0,\n            time: '',\n            quiz: false\n        };\n    }\n\n    // Checking if the answer is right or wrong\n    onAnswerClicked = (question, answer) => {\n        console.log(question, answer);\n        // The API has a correctanswer property so we are checking if the answer they clicked is === to the correctanswer\n        console.log(answer === question.correct_answer)\n        // Need to push correct answer to score in state\n\n        let nextPlayer = this.state.currentPlayer;\n        // increments the questions up by 1 index number\n        let nextQuestionPosition = this.state.currentQuestion + 1;\n        // if this.state.currentQuestion is greater than an index of 2, reset this.state.currentQuestion to 0 and increment to the next player index (go to the next player)\n        if (nextQuestionPosition > 2) {\n            nextQuestionPosition = 0;\n            nextPlayer = nextPlayer + 1;\n        }\n\n        // \n        this.setState({\n            currentPlayer: nextPlayer,\n            currentQuestion: nextQuestionPosition\n        })\n    }\n\n    //https://stackoverflow.com/a/12646864\n    /* Randomize array in-place using Durstenfeld shuffle algorithm */\n    shuffleArray = (array) => {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n\n    // This function is called right on page load\n    showQuestions = () => {\n        // console.log(this.props.players)\n\n        // ERROR HANDLING: If there are no players (this.state.players) OR no questions in the players state, don't render anything\n        if (!this.props.players || !this.props.players[0].questions) {\n            console.log(\"Pick your categories\")\n            return <></>\n\n        } else {\n            // console.log(this.props.players)\n            // ELSE look in the players array for the current player's index number\n            const player = this.props.players[this.state.currentPlayer];\n\n            // If there is no player number, display \"no player\"\n            // This is at the end of the game when there are no more players to play - this where we'll route to the scoreboard\n            if (!player) {\n                return <div>No player</div>\n            }\n\n            // question = the player's current question\n            const question = player.questions[this.state.currentQuestion];\n            // console.log(question)\n\n            // This show all 4 answers brought back from the API - 3 incorrect and 1 correct\n            // 3 incorrect answers are in an array so we are spreading it\n            const allAnswers = [...question.incorrect_answers, question.correct_answer]\n\n            // Shuffling the answers using the shuffleArray method so the last answer isn't always the right one\n            this.shuffleArray(allAnswers)\n\n            return <div>\n                {/* Shows current player's name they entered */}\n                <p>Player {player.name}</p>\n\n                {/* Question #: question text from API call */}\n                <h2>{`Question ${this.state.currentQuestion + 1} : ${question.question}`}</h2>\n\n                {/* Rendering all answers on the page as buttons */}\n                {allAnswers.map((answer) => {\n                    // console.log(this);\n                    // When a button is clicked, run onAnswerClicked function which checks if it's right or wrong\n                    // first param is the question, second is an answer param\n                    return <button onClick={() => this.onAnswerClicked(question, answer)}>\n                        {answer}\n                    </button>\n                })}\n            </div>\n                ;\n        }\n    }\n\n    stopTime = () => {\n\n        this.setState({\n            currentPlayer: this.state.currentPlayer + 1,\n            quiz: false\n        })\n\n        return (\n            <p>Time is up</p>\n        )\n    }\n\n    showQuiz = () => {\n        this.setState({\n            quiz: true\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={this.showQuiz}>PLAY</button>\n\n                {this.state.quiz ? (this.showQuestions()\n                ) : null}\n\n                {this.state.quiz ? (< Timer stopTime={this.stopTime} />) : null}\n            </div>\n        )\n    }\n}\n\nexport default Playgame;\n","// Mini App.js that will take info from NumberOf Players & Names & Avatars\n\nimport React, { Component } from \"react\";\nimport NumberOfPlayers from './NumberOfPlayers.js';\nimport NamesAndAvatars from './NamesAndAvatars.js';\nimport Category from \"../Category.js\";\nimport { BrowserRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\nimport Playgame from '../Playgame'\n\nclass PlayerInformation extends Component {\n    constructor() {\n        super();\n        this.state = {\n            players: [],\n            numberOfPlayers: 0,\n            goToCategory: false,\n            goToPlay: false\n        }\n    }\n    getNumberOfPlayers = (numberOfPlayers) => {\n        this.setState({\n            numberOfPlayers: numberOfPlayers\n        })\n    }\n    getPlayerInformation = (players) => {\n\n        this.setState({\n            players: players,\n            goToCategory: true\n        })\n    }\n    // getCategory = (e, players) => {\n    //     e.preventDefault();\n    //     this.setState({\n    //         players: players,\n    //         goToPlay: true\n    //     })\n    // }\n\n    render() {\n        return (\n            <div>\n                <NumberOfPlayers numberOfPlayers={this.getNumberOfPlayers} />\n                <NamesAndAvatars numberOfPlayers={this.state.numberOfPlayers} playerInformation={this.getPlayerInformation} />\n                {this.state.goToCategory === true ? (<Category playerInfo={this.state.players} getPlayerInformation={this.props.getCategory} />) : null}\n\n\n                {/* <Link to=\"/play\">click here</Link> */}\n\n\n\n                {/* // <Route path=\"/Play\" render={(this.state.players) => <Playgame {...this.state.players} title={'Playgame'}/>} /> */}\n            </div>\n        )\n    }\n}\nexport default PlayerInformation;","import './App.css';\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport Header from './Header.js'\nimport Footer from './Footer.js'\nimport Category from './Category.js';\nimport ScoreBoard from './ScoreBoard.js';\nimport Timer from './Timer.js'\nimport PlayerInformation from './playerInfo/PlayerInformation.js';\nimport Playgame from './Playgame.js'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questions: {},\n      players: [],\n      goToPlay: false\n    }\n  }\n\n  // handleChange = (event) => {\n  //   console.log(event);\n  //   this.setState({\n  //     players: event.target.value,\n  //   })\n  // }\n\n  updatedPlayersInformation = (e, players) => {\n    e.preventDefault();\n    this.setState({\n      players: players\n    })\n  }\n\n  // Event Listener for Play Again button\n  // Resets state to be empty so players can start again\n  // Confirm all key value pairs in state\n  handleReset = (event) => {\n    event.preventDefault();\n    this.setState({\n      questions: {},\n      players: []\n    })\n  }\n\n  getCategory = (e, players) => {\n    e.preventDefault();\n    this.setState({\n      players: players,\n      goToPlay: true\n    })\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n\n          <Header />\n          {this.state.goToPlay ? <Redirect to=\"/play\" /> : null}\n\n          <Route exact path=\"/\">\n            <PlayerInformation\n              getCategory={this.getCategory} />\n          </Route>\n\n          <Route path=\"/play\" render={(props) => <Playgame players={this.state.players} title={`Props through render`} />} />\n\n          {/* <form>\n          <fieldset>\n            <label htmlFor=\"\">Number of players: </label>\n            <select onChange={this.handleChange}>\n              <option disabled selected className=\"default\">Number of Players</option>\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n            </select>\n          </fieldset>\n        </form> */}\n\n          {/* <Players numberOfPlayers={this.state.players} getPlayerInformation={this.updatedPlayersInformation} /> */}\n          {/* <Category playerInfo={this.state.players} getPlayerInformation={this.updatedPlayersInformation} /> */}\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}