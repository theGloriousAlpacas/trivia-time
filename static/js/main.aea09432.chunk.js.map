{"version":3,"sources":["triviaTimeLogo.png","Header.js","playerInfo/NumberOfPlayers.js","playerInfo/NamesAndAvatars.js","Category.js","playerInfo/PlayerInformation.js","Timer.js","ScoreBoard.js","Playgame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","HowManyPlayers","handleChange","event","props","numberOfPlayers","target","value","htmlFor","onChange","this","Component","NameAndAvatars","getAvatars","updateState","e","preventDefault","players","createPlayers","setState","isShowingAvatars","avatars","shuffleArray","i","push","id","toString","img","name","score","valid","array","size","length","temporaryValue","randomIndex","currentIndex","Math","floor","random","slice","index","state","handleFormSubmit","formIsValid","validateForm","playerInformation","alert","generatePlayers","map","player","key","document","querySelector","scrollIntoView","behavior","onSubmit","class","type","onClick","Category","j","temp","questionsSubmit","res","playerInfo","questions","newInfo","count","arr","x","allAnswers","incorrect_answers","correct_answer","category","selectedCategory","numberOfQuestions","axios","url","params","amount","difficulty","then","response","data","results","parser","DOMParser","question","forEach","incorrectAnswer","newString","parseFromString","body","textContent","oldString","generateQuestions","disabled","selected","getPlayerInformation","PlayerInformation","getNumberOfPlayers","goToCategory","goToPlay","NumberOfPlayers","NamesAndAvatars","getCategory","Timer","startQuiz","start","myInterval","setInterval","timer","stopTime","clearInterval","ScoreBoard","localPlayers","sort","a","b","handleReset","to","Playgame","componentDidMount","handleNextPlayer","cleanTheScreen","currentPlayer","answeredQuestionTracker","div","classList","toggle","onAnswerClicked","answer","questionNumber","parentDiv","parentNode","timerFunction","showQuestions","indexA","reset","App","updatedPlayersInformation","basename","process","exact","path","render","pathname","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aea09432.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/triviaTimeLogo.44de159f.png\";","import React, { Component } from \"react\";\nimport logo from \"./triviaTimeLogo.png\";\n\nconst Header = () => {\n    return(\n        <header>\n            <div className=\"wrapper\">\n                <div className=\"headerContainer\">\n                    <img src={logo} className=\"logo\" alt=\"Trivia Time logo\"/>\n                    <h1><span>Fight your friends</span> <span>in a battle of wits!</span></h1>\n                </div>\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","import React, { Component } from \"react\";\n\nclass HowManyPlayers extends Component {\n    handleChange = (event) => {\n        this.props.numberOfPlayers(event.target.value);\n    }\n    render() {\n        return (\n          <main>\n            <form>\n              <fieldset className=\"playerForm\">\n                <label className=\"playerLabel\" htmlFor=\"playerForm\">How many are playing?!</label>\n                <select onChange={this.handleChange}>\n                  <option value=\"\">Number of Friends!</option>\n                  <option value=\"1\">1</option>\n                  <option value=\"2\">2</option>\n                  <option value=\"3\">3</option>\n                  <option value=\"4\">4</option>\n                </select>\n              </fieldset>\n            </form>\n          </main>\n        );\n    }\n}\nexport default HowManyPlayers;","import React, { Component } from \"react\";\n\nclass NameAndAvatars extends Component {\n    constructor() {\n        super();\n        this.state = {\n            players: [],\n            isShowingAvatars: false\n        };\n    }\n\n    componentDidMount() {\n        document\n        .querySelector(\".avatarSection\")\n        .scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    getAvatars = () => {\n        return [\n        \"https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=blue\",\n        \"https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=red\",\n        \"https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=yellow\",\n        \"https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=purple\",\n        ];\n    };\n\n    updateState = (e, numberOfPlayers) => {\n        e.preventDefault();\n        if(numberOfPlayers !== 0) {\n            let players = this.createPlayers(numberOfPlayers);\n            this.setState({\n                isShowingAvatars: true,\n                players: players\n            });\n        }\n    };\n\n    createPlayers = (numberOfPlayers) => {\n        let avatars = this.getAvatars();\n        let players = [];    \n        avatars = this.shuffleArray(avatars);\n        for (let i = 0; i < numberOfPlayers; i++) {\n            players.push({\n                id: (i + 1).toString(),\n                img: avatars[i],\n                name: \"\",\n                score: 0,\n                valid: false\n            });\n        }\n        return players;\n    }\n\n    shuffleArray = (array, size) => {\n        size = size || array.length;\n        let currentIndex = array.length;\n        let temporaryValue;\n        let randomIndex;\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n        return array.slice(0,size);\n    }\n\n    handleChange = (e) => {\n        let index = e.target.id - 1;\n        let name = e.target.value;\n        this.setState((state) => {\n            state.players[index].valid = (name && name.length !== 0);\n        });\n    }\n\n    handleFormSubmit = (e) => {\n        e.preventDefault();\n\n        let formIsValid = this.validateForm(this.state.players);\n        this.props.playerInformation(this.state.players, formIsValid);\n       \n        if (formIsValid) {\n            for(let i=0; i<e.target.length-1; i++) {\n                let index = e.target[i].id - 1;\n                let name = e.target[i].value;\n                this.setState((state) => {\n                    state.players[index].name = name;\n                });         \n            }\n        } else {\n            alert(\"Slow your roll! Enter some names first!\");\n        }\n    };\n\n    validateForm = (players) => {\n        for(let i=0; i< players.length; i++) {\n            if(!players[i].valid) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    generatePlayers = () => {\n        if (this.state.isShowingAvatars) {\n            const players = this.state.players;\n            return ( \n                <div className=\"playerSetupContainer\">\n                    {players.map((player) => {\n                        return (\n                            <div key={player.id} className=\"playerInfoInput\">\n                                <img src={player.img} alt=\"\" />\n                                <input onChange={this.handleChange} id={player.id}/>\n                            </div>\n                        );\n                    })}\n                </div>\n            );\n        } else {\n            return <></>;\n        }\n    };\n\n    render() {\n        return (\n          <div className=\"avatarSection\">\n            <form onSubmit={this.handleFormSubmit} className=\"numberOfPlayersSubmit\">\n              {this.generatePlayers()}\n              {!this.state.isShowingAvatars \n                    ? (<button type=\"button\" class=\"setupButton\" onClick={(e) => this.updateState(e, this.props.numberOfPlayers)}>Double Check You Have Enough Friends!</button>) \n                    : (<button class=\"setupButton\" type=\"submit\">Let's Battle!</button>)\n              }\n            </form>\n          </div>\n        );\n    }\n}\n\nexport default NameAndAvatars;\n\n\n\n\n\n\n\n\n\n\n\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nclass Category extends Component {\n    constructor() {\n        super();\n        this.state = {\n            players: [],\n            category: \"\"\n        }\n    }\n    generateQuestions(e, playerInfo) {\n        const selectedCategory = e.target.value\n        const numberOfQuestions = playerInfo.length * 3\n\n        axios({\n            url: 'https://opentdb.com/api.php',\n            params: {\n                amount: numberOfQuestions,\n                category: selectedCategory,\n                difficulty: \"medium\",\n                type: \"multiple\",\n            }\n        }).then(response => {\n            const res = response.data.results;\n\n            // Useing DOMParser to get a string without crazy characters\n            const parser = new DOMParser();\n            res.map((question) => {\n                question.incorrect_answers.forEach((incorrectAnswer, index) => {\n                    const dom = parser.parseFromString(incorrectAnswer, \"text/html\")\n                    const newString = dom.body.textContent;\n                    question.incorrect_answers[index] = newString;\n                });\n                const oldString = question.correct_answer\n                const dom = parser.parseFromString(oldString, \"text/html\")\n                const newString = dom.body.textContent;\n                question.correct_answer = newString\n            })\n            res.map((question) => {\n                const oldString = question.question;\n                const dom = parser.parseFromString(oldString, \"text/html\")\n                const newString = dom.body.textContent;\n                question.question = newString\n            })\n            this.questionsSubmit(res, this.props.playerInfo)\n        })\n    }\n\n    componentDidMount() {\n        document\n            .querySelector(\".categoryContainer\")\n            .scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    shuffleArray = (array) => {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    }\n    questionsSubmit = (res, playerInfo) => {\n        const questions = res\n        const newInfo = playerInfo\n\n        for (let i = 0; i < questions.length / 3; i++) {\n            let count = 0;\n            const arr = [];\n            while (count < 3) {\n                let x = i * 3 + count;\n                res[x].allAnswers = [...res[x].incorrect_answers, res[x].correct_answer];\n                res[x].allAnswers = this.shuffleArray(res[x].allAnswers);\n                arr.push(res[x]);\n                count++;\n            }\n            newInfo[i].questions = arr;\n        }\n\n        this.setState({\n            players: newInfo\n        })\n    };\n\n    render() {\n        return (\n            <div className=\"categoryContainer\">\n                <form className=\"categoryForm\" onChange={(e) => {\n                    this.generateQuestions(e, this.props.playerInfo)\n                }}>\n                    <fieldset className=\"categoryFieldset\">\n                        <label className=\"categoryLabel\" htmlFor=\"\">Select Category: </label>\n                        <select>\n                            <option disabled selected className=\"default\">Select a Category</option>\n                            <option value=\"9\">General Knowledge</option>\n                            <option value=\"27\">Animals</option>\n                            <option value=\"29\">Comics</option>\n                            <option value=\"11\">Movies</option>\n                            <option value=\"17\">Science And Nature</option>\n                        </select>\n                    </fieldset>\n\n                    {this.state.players.length !== 0 ? <button className=\"categoryName setupButton\" onClick={(e) => { this.props.getPlayerInformation(e, this.state.players) }}>It's Time For the Showdown!</button> : null}\n\n                </form>\n            </div>\n        )\n    }\n}\nexport default Category;","// This will take info from NumberOf Players & Names & Avatars\n\nimport React, { Component } from \"react\";\nimport NumberOfPlayers from \"./NumberOfPlayers.js\";\nimport NamesAndAvatars from \"./NamesAndAvatars.js\";\nimport Category from \"../Category.js\";\n\nclass PlayerInformation extends Component {\n    constructor() {\n        super();\n        this.state = {\n            players: [],\n            numberOfPlayers: 0,\n            goToCategory: false,\n            goToPlay: false\n        }\n    }\n    getNumberOfPlayers = (numberOfPlayers) => {\n        this.setState({\n            numberOfPlayers: numberOfPlayers\n        })\n    }\n    getPlayerInformation = (players, formIsValid) => {\n        this.setState({\n            players: players,\n            goToCategory: formIsValid\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <NumberOfPlayers numberOfPlayers={this.getNumberOfPlayers} />\n                <NamesAndAvatars numberOfPlayers={this.state.numberOfPlayers} playerInformation={this.getPlayerInformation} />\n                {this.state.goToCategory === true \n                    ? (<Category playerInfo={this.state.players} getPlayerInformation={this.props.getCategory} />) \n                    : null}\n            </div>\n        )\n    }\n}\nexport default PlayerInformation;","import React, { Component } from \"react\";\n\nclass Timer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            timer: 30,\n            start: true\n        }\n    }\n\n    componentDidMount() {\n        let myInterval = setInterval(() => {\n            this.setState({\n                timer: this.state.timer - 1\n            })\n        }, 1000)\n        this.setState({\n            myInterval: myInterval\n        })\n    }\n\n    componentDidUpdate() {\n\n        if (this.state.timer === 0) {\n\n            this.setState({\n                timer: 30,\n                start: false\n            })\n            this.props.stopTime();\n\n            clearInterval(this.state.myInterval);\n        }\n    }\n\n    startQuiz = () => {\n        this.setState({\n            start: true\n        })\n        this.myInterval = setInterval(() => {\n            this.setState({\n                timer: this.state.timer - 1\n            })\n        }, 1000)\n    }\n\n    render() {\n        let timer = () => {\n            if (this.state.timer >= 15) {\n                return <p className=\"timer timerOk\">{this.state.timer}</p>\n            } else if (this.state.timer >= 10) {\n                return <p className=\"timer timerWrapUp\">{this.state.timer}</p>\n            } else {\n                return <p className=\"timer timerDanger\">{this.state.timer}</p>\n            }\n        }\n        return (\n            <>\n                <p>{this.state.start ? timer() : \"Time's Up!\"}</p>\n            </>\n        )\n    }\n}\nexport default Timer;","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\n\nclass ScoreBoard extends Component {\n\n    render() {\n\n        let localPlayers = this.props.playerInformation;\n        localPlayers.sort((a, b) => b.score - a.score);\n\n        return (\n            <section className=\"finalResults\">\n\n                <div className=\"scoreBoard\">\n                    <h2>Results</h2>\n                    <div className=\"scoreList\">\n                        <ul>\n                            {localPlayers.map((player, index) => {\n\n                                const name = player.name;\n                                const score = player.score;\n                                \n                                return (\n                                    <li key={index}>\n                                        <div className=\"results\">\n                                            <h3>{name}</h3>\n                                            <p>{score}</p>\n                                        </div>\n                                    </li>\n                                )\n                            })}\n                        </ul>\n                    </div>\n\n                    <button className=\"replay\" onClick={this.props.handleReset}>\n                        <Link to=\"/\">\n                            Quiz Your Friends Again!\n                        </Link>\n                    </button>\n\n                    {/* <Link className=\"replay\" to=\"/\" onClick={this.props.handleReset}>Quiz Your Friends Again!</Link> */}\n                </div>\n            </section>\n        )\n    }\n}\nexport default ScoreBoard;","import React, { Component } from \"react\";\nimport Timer from \"./Timer.js\";\nimport ScoreBoard from \"./ScoreBoard.js\"\n\n// Started the current game at current Player at 0 which is the first player.\n    // The current question for the player is 0 too.\nclass Playgame extends Component {\n    constructor() {\n        super();\n        this.state = {\n            cleanTheScreen: false,\n            currentPlayer: 0,\n            answeredQuestionTracker: [false, false, false],\n        };\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            players: this.props.players\n        })\n        document\n            .querySelector(\".gameScreen\")\n            .scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    handleNextPlayer = () => {\n        this.setState({\n            cleanTheScreen: true,\n            currentPlayer: this.state.currentPlayer + 1,\n            answeredQuestionTracker: [false, false, false],\n        })\n        const div1 = document.querySelector(\".answer1\")\n        const div2 = document.querySelector(\".answer2\")\n        const div3 = document.querySelector(\".answer3\")\n        const divArray = [div1, div2, div3]\n\n        divArray.forEach((div) => {\n            div.classList.toggle(\"parentHide\")\n        })\n        const questionDiv = document.querySelector(\".questionDiv\")\n        questionDiv.classList.toggle(\"questionDivHide\")\n    }\n\n    onAnswerClicked = (e, question, answer, questionNumber) => {\n        const parentDiv = e.target.parentNode\n        if (!this.state.answeredQuestionTracker[questionNumber]) {\n            let player = this.props.players[this.state.currentPlayer];\n            if (answer === question.correct_answer) {\n                player.score++;\n                let answeredQuestionTracker = this.state.answeredQuestionTracker;\n                answeredQuestionTracker[questionNumber] = true;\n                this.setState({\n                    answeredQuestionTracker: answeredQuestionTracker,\n                });\n            }\n        }\n        parentDiv.classList.toggle(\"parentHide\")\n    }\n\n    timerFunction = () => {\n        const questionDiv = document.querySelector(\".questionDiv\")\n        questionDiv.classList.toggle(\"questionDivHide\")\n    }\n\n    showQuestions = () => {\n        if (!this.props.players || !this.props.players[0].questions) {\n            return <></>;\n        } else if (this.state.cleanTheScreen) {\n            this.setState({\n                cleanTheScreen: false\n            });\n            return <></>;\n        } else {\n            const player = this.props.players[this.state.currentPlayer];\n            if (!player) {\n                return <ScoreBoard playerInformation={this.props.players} handleReset={this.props.reset} />\n            }\n            return (\n                <section className=\"gameScreen\">\n                    <div className=\"wrapper\">\n                        <div className=\"questionDiv\">\n                            <div className=\"turnDetails\">\n                                <p className=\"playerName\">Player Up to Bat: {player.name}</p>\n                                <div className=\"timerBackground\">\n                                    <Timer stopTime={this.timerFunction} />\n                                </div>\n                            </div>\n\n                            <div className=\"questionContainer\">\n\n                                {player.questions.map((question, index) => {\n                                    return (\n                                        <div className=\"questions\" key={index}>\n                                            <p className=\"questionText\" key={index}>{`Question ${index + 1} : ${question.question}`}</p>\n                                            <div className={`answer${index + 1}`}>\n                                                {question.allAnswers.map((answer, indexA) => {\n                                                    return (\n                                                        <button className=\"answerButton\" key={`${index}${indexA}`} onClick={(e) => this.onAnswerClicked(e, question, answer, index)}>\n                                                            {answer}</button>\n                                                    )\n                                                })}\n                                            </div>\n                                        </div>)\n                                })}\n                            </div>\n                        </div>\n\n                        <div className=\"nextButton\">\n                            <button className=\"nextPlayer answerButton\" onClick={this.handleNextPlayer}>Continue</button>\n                        </div>\n\n                    </div>\n\n                </section>\n            )\n        }\n    };\n\n    render() {\n        return this.showQuestions();\n    }\n}\nexport default Playgame;","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\n\nimport Header from \"./Header.js\";\nimport PlayerInformation from \"./playerInfo/PlayerInformation.js\";\nimport Playgame from \"./Playgame.js\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questions: {},\n      players: [],\n      goToPlay: false\n    }\n  }\n\n  updatedPlayersInformation = (e, players) => {\n    e.preventDefault();\n    this.setState({\n      players: players\n    })\n  }\n\n  handleReset = (event) => {\n    event.preventDefault();\n    this.setState({\n      questions: {},\n      players: [],\n      goToPlay: false\n    })\n  }\n\n  getCategory = (e, players) => {\n    e.preventDefault();\n    this.setState({\n      players: players,\n      goToPlay: true\n    })\n  }\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n\n          <Header />\n          {this.state.goToPlay ? <Redirect to=\"/play\" /> : null}\n\n          <Route exact path=\"/\">\n            <PlayerInformation\n              getCategory={this.getCategory} />\n          </Route>\n\n          <Route path=\"/play\" render={(props) => <Playgame players={this.state.players} reset={this.handleReset}/>} />\n          <Route render={() => <Redirect to={{ pathname: \"/\" }} />} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}